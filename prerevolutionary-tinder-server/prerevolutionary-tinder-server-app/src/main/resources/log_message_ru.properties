#FavouriteService
retrieved.favorites.with.id=Retrieved {} favorites for user with ID: {}
error.retrieved.favorites.with.id=Error retrieving favorites for user with ID: {}
find.favorites.with.id=Find {} favorites for user with ID: {}
find.favorites.with.ud=Find {} favorites for user with ID: {}
error.find.favorites.with.id=Error finding favorites with ID: {}
error.find.favorites=Error finding favorites
favorite.already.exists.with.id=Favorite already exists for user with ID: {} and favorite user ID: {}
favorite.created.successfully=Favorite created successfully for user with ID: {} and favorite user ID: {}
error.creating.favorite=Error creating favorite
error.finding.favorites.by.filter=Error finding favorites by filter
error.finding.favorites.by.id=Error getting favorite by ID: {}
#MutualityServiceImpl
mutual.found.for.use.id=Mutual connection found for user with ID: {}
no.mutual.connection.found=No mutual connection found between users with IDs: {} and {}
one.sided.connection.found=One-sided connection found for user with ID: {}
no.connection.found=No connection found for user with ID: {}
error.mutual.found.for.use.id=Error determining mutuality for user with ID: {}
mutual.found.for.use.ids=Mutual connection found between users with IDs: {} and {}
error.mutual.found.for.use.ids=Error determining mutuality between users with IDs: {} and {}
#ProfileService
matching.profiles.retrieved=Successfully retrieved matching profiles for user with ID: {}
current.profile.retrieved=Successfully retrieved profile for current user with ID: {}
current.profile.not.found=Profile not found for user with ID: {}
profile.not.found=Profile not found for user with ID: {}
profile.found=Profile found with ID: {}
profile.found.with.id=Profile found with ID: {}
profile.created=Profile created successfully with ID: {}
profile.updated=Profile with ID {} updated successfully
error.retrieving.matching.profiles=Error retrieving matching profiles
error.retrieving.current.profile=Error retrieving current profile
error.retrieving.profile.by.user.id=Error retrieving profile by user ID: {}
error.retrieving.profile.by.id=Error retrieving profile by ID: {}
error.creating.profile=Error creating profile
error.updating.profile=Error updating profile with ID: {}
gender.is.null.or.empty=Gender is null or empty
seeking.for.is.null.or.empty=SeekingFor is null or empty
#UserServiceImpl
error.retrieving.all.users=Error retrieving all users
error.retrieving.user.by.id=Error retrieving user by ID: {}
error.retrieving.user.by.username=Error retrieving user by username: {}
error.creating.user=Error creating user
error.during.user.registration=Error during user registration for username: {}
error.updating.user=Error updating user with ID: {}
user.deleted=Successfully deleted user with ID: {}
error.deleting.user=Error deleting user with ID: {}
